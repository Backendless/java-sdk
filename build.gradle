buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    google()
  }

  dependencies {

  }
}

plugins {

}

allprojects {
  ext.'signing.keyId' = gradle.ext.mvncentralRepoCreds.'signing.keyId'
  ext.'signing.password' = gradle.ext.mvncentralRepoCreds.'signing.password'
  ext.'signing.secretKeyRingFile' = java.nio.file.Paths.get("$gradle.ext.userHome").resolve(gradle.ext.mvncentralRepoCreds.'signing.secretKeyRingFile').toAbsolutePath().toString()

  apply plugin: 'signing'
  apply plugin: 'maven-publish'

  tasks.withType( JavaCompile ) {
    configure( options ) {
      options.encoding = 'UTF-8'
      options.debug = true
      options.failOnError = true
      options.warnings = true
      options.compilerArgs.addAll( ['-g', '-parameters'] )
      //[compileJava, compileTestJava]*.options*.compilerArgs = ['-g', '-parameters']
    }

    tasks.withType( Javadoc ) {
      options.addStringOption( 'Xdoclint:none', '-quiet' )
    }
  }

  signing {
    sign configurations.archives
  }

  publishing {
    repositories {
      maven {
        name 'BackendlessPublic'
        url 'https://maven.backendless.com/repository/backendless_public/'
        credentials {
          username gradle.ext.backendlessRepoCreds.username
          password gradle.ext.backendlessRepoCreds.password
        }
        authentication {
          basic( BasicAuthentication )
        }
      }

      maven {
        name = 'MavenCentral'
        url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        credentials {
          username gradle.ext.mvncentralRepoCreds."user.name"
          password gradle.ext.mvncentralRepoCreds."user.password"
        }
        authentication {
          basic( BasicAuthentication )
        }
      }

      maven {
        name = 'MavenCentralSnapshot'
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        credentials {
          username gradle.ext.mvncentralRepoCreds."user.name"
          password gradle.ext.mvncentralRepoCreds."user.password"
        }
        authentication {
          basic( BasicAuthentication )
        }
      }
    }
  }
}

tasks.register( 'copyJarToOut' ) {
  doLast {
    copy( () -> from "$projectDir.path/gradle.properties" into "$projectDir.path/out" )
  }
}

clean {
  delete( "$projectDir.path/out" )
}