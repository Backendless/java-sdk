<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 7.4.0-beta02" type="baseline" client="gradle" dependencies="false" name="AGP (7.4.0-beta02)" variant="all" version="7.4.0-beta02">

    <issue
        id="GradleCompatible"
        message="Dependencies using groupId `com.android.support` and `androidx.*` can not be combined but found `com.android.support:support-compat:28.0.0` and `androidx.fragment:fragment:1.0.0` incompatible dependencies"
        errorLine1="  compileOnly &apos;com.android.support:support-compat:28.0.0&apos;"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="build.gradle"
            line="24"
            column="16"/>
    </issue>

    <issue
        id="GradleCompatible"
        message="Version 28 (intended for Android Pie and below) is the last version of the legacy support library, so we recommend that you migrate to AndroidX libraries when using Android Q and moving forward. The IDE can help with this: Refactor > Migrate to AndroidX..."
        errorLine1="  compileOnly &apos;com.android.support:support-compat:28.0.0&apos;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="build.gradle"
            line="24"
            column="15"/>
    </issue>

    <issue
        id="ApplySharedPref"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        errorLine1="    editor.commit();"
        errorLine2="           ~~~~~~~~">
        <location
            file="src/main/java/com/backendless/AndroidBackendlessPrefs.java"
            line="91"
            column="12"/>
    </issue>

    <issue
        id="ApplySharedPref"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        errorLine1="    editor.commit();"
        errorLine2="           ~~~~~~~~">
        <location
            file="src/main/java/com/backendless/AndroidBackendlessPrefs.java"
            line="116"
            column="12"/>
    </issue>

    <issue
        id="ApplySharedPref"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        errorLine1="      editor.commit();"
        errorLine2="             ~~~~~~~~">
        <location
            file="src/main/java/com/backendless/AndroidBackendlessPrefs.java"
            line="203"
            column="14"/>
    </issue>

    <issue
        id="ApplySharedPref"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        errorLine1="    editor.commit();"
        errorLine2="           ~~~~~~~~">
        <location
            file="src/main/java/com/backendless/AndroidBackendlessPrefs.java"
            line="216"
            column="12"/>
    </issue>

    <issue
        id="ApplySharedPref"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        errorLine1="      editor.commit();"
        errorLine2="             ~~~~~~~~">
        <location
            file="src/main/java/com/backendless/AndroidBackendlessPrefs.java"
            line="228"
            column="14"/>
    </issue>

    <issue
        id="ApplySharedPref"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        errorLine1="    editor.commit();"
        errorLine2="           ~~~~~~~~">
        <location
            file="src/main/java/com/backendless/AndroidBackendlessPrefs.java"
            line="245"
            column="12"/>
    </issue>

    <issue
        id="ApplySharedPref"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        errorLine1="    editor.commit();"
        errorLine2="           ~~~~~~~~">
        <location
            file="src/main/java/com/backendless/AndroidBackendlessPrefs.java"
            line="261"
            column="12"/>
    </issue>

    <issue
        id="ApplySharedPref"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        errorLine1="    editor.commit();"
        errorLine2="           ~~~~~~~~">
        <location
            file="src/main/java/com/backendless/AndroidUserIdStorage.java"
            line="40"
            column="12"/>
    </issue>

    <issue
        id="ApplySharedPref"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        errorLine1="    editor.commit();"
        errorLine2="           ~~~~~~~~">
        <location
            file="src/main/java/com/backendless/AndroidUserTokenStorage.java"
            line="40"
            column="12"/>
    </issue>

    <issue
        id="DiscouragedPrivateApi"
        message="Reflective access to mInitialApplication, which is not part of the public SDK and therefore likely to change in future Android releases"
        errorLine1="      final Field field = activityThreadClass.getDeclaredField( &quot;mInitialApplication&quot; );"
        errorLine2="                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/ContextHandlerAndroidImpl.java"
            line="63"
            column="27"/>
    </issue>

    <issue
        id="PrivateApi"
        message="Accessing internal APIs via reflection is not supported and may not work on all devices or in the future"
        errorLine1="      final Class&lt;?> activityThreadClass = Class.forName( &quot;android.app.ActivityThread&quot; );"
        errorLine2="                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/ContextHandlerAndroidImpl.java"
            line="39"
            column="44"/>
    </issue>

    <issue
        id="PrivateApi"
        message="Accessing internal APIs via reflection is not supported and may not work on all devices or in the future"
        errorLine1="      final Class&lt;?> activityThreadClass = Class.forName( &quot;android.app.ActivityThread&quot; );"
        errorLine2="                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/ContextHandlerAndroidImpl.java"
            line="60"
            column="44"/>
    </issue>

    <issue
        id="QueryPermissionsNeeded"
        message="Consider adding a `&lt;queries>` declaration to your manifest when calling this \&#xA;method; see https://g.co/dev/packagevisibility for details"
        errorLine1="    List&lt;ResolveInfo> srvIntentFilters = packageManager.queryIntentServices( intent, PackageManager.GET_INTENT_FILTERS );"
        errorLine2="                                                        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/push/FCMRegistration.java"
            line="279"
            column="57"/>
    </issue>

    <issue
        id="DiscouragedApi"
        message="Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. `R.foo.bar`) than by name (e.g. `getIdentifier(&quot;bar&quot;, &quot;foo&quot;, null)`)."
        errorLine1="        int largeIconResource = appContext.getResources().getIdentifier( largeIcon, &quot;drawable&quot;, appContext.getPackageName() );"
        errorLine2="                                                          ~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/push/PushTemplateHelper.java"
            line="143"
            column="59"/>
    </issue>

    <issue
        id="DiscouragedApi"
        message="Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. `R.foo.bar`) than by name (e.g. `getIdentifier(&quot;bar&quot;, &quot;foo&quot;, null)`)."
        errorLine1="      icon = appContext.getResources().getIdentifier( template.getIcon(), &quot;mipmap&quot;, appContext.getPackageName() );"
        errorLine2="                                       ~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/push/PushTemplateHelper.java"
            line="157"
            column="40"/>
    </issue>

    <issue
        id="DiscouragedApi"
        message="Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. `R.foo.bar`) than by name (e.g. `getIdentifier(&quot;bar&quot;, &quot;foo&quot;, null)`)."
        errorLine1="        icon = appContext.getResources().getIdentifier( template.getIcon(), &quot;drawable&quot;, appContext.getPackageName() );"
        errorLine2="                                         ~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/push/PushTemplateHelper.java"
            line="160"
            column="42"/>
    </issue>

    <issue
        id="DiscouragedApi"
        message="Use of this function is discouraged because resource reflection makes it harder to perform build optimizations and compile-time verification of code. It is much more efficient to retrieve resources by identifier (e.g. `R.foo.bar`) than by name (e.g. `getIdentifier(&quot;bar&quot;, &quot;foo&quot;, null)`)."
        errorLine1="      int soundResource = context.getResources().getIdentifier( resource, &quot;raw&quot;, context.getPackageName() );"
        errorLine2="                                                 ~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/push/PushTemplateHelper.java"
            line="218"
            column="50"/>
    </issue>

    <issue
        id="HardwareIds"
        message="Using `getString` to get device identifiers is not recommended"
        errorLine1="    this.deviceId = Settings.Secure.getString( ((Context) getContext()).getContentResolver(), Settings.Secure.ANDROID_ID );"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/AndroidBackendlessPrefs.java"
            line="27"
            column="21"/>
    </issue>

    <issue
        id="UnspecifiedImmutableFlag"
        message="Missing `PendingIntent` mutability flag"
        errorLine1="    PendingIntent contentIntent = PendingIntent.getActivity( appContext, notificationId * 3, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT );"
        errorLine2="                                                                                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/push/PushTemplateHelper.java"
            line="198"
            column="114"/>
    </issue>

    <issue
        id="UnspecifiedImmutableFlag"
        message="Missing `PendingIntent` mutability flag"
        errorLine1="      PendingIntent pendingIntent = PendingIntent.getActivity( appContext, notificationId * 3 + i++, actionIntent, PendingIntent.FLAG_UPDATE_CURRENT );"
        errorLine2="                                                                                                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/com/backendless/push/PushTemplateHelper.java"
            line="242"
            column="116"/>
    </issue>

    <issue
        id="AnnotationProcessorOnCompilePath"
        message="Add annotation processor to processor path using `annotationProcessor` instead of `compileOnly`"
        errorLine1="  compileOnly &apos;org.projectlombok:lombok:1.18.24&apos;"
        errorLine2="  ~~~~~~~~~~~">
        <location
            file="build.gradle"
            line="18"
            column="3"/>
    </issue>

</issues>
